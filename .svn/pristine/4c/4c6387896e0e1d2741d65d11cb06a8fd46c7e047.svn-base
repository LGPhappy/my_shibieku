package com.xdja.zdsb.view;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import com.xdja.zdsb.R;
import com.xdja.zdsb.utils.Constant;
import com.xdja.zdsb.utils.Zzlog;

import android.app.Activity;
import android.app.Service;
import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.ImageFormat;
import android.graphics.PixelFormat;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.hardware.Camera;
import android.hardware.Camera.AutoFocusCallback;
import android.hardware.Camera.Size;
import android.os.Bundle;
import android.os.Environment;
import android.os.IBinder;
import android.os.Vibrator;
import android.text.format.Time;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import android.widget.Toast;
import wintone.idcard.android.IDCardAPI;
import wintone.idcard.android.RecogParameterMessage;
import wintone.idcard.android.RecogService;
import wintone.idcard.android.ResultMessage;

public class IDCardRegnizerActivity extends Activity {

    private static final String TAG = "CardIdActivity";

    protected static final int ROTATION = 0;

    public String PATH = Environment.getExternalStorageDirectory().toString() + "/xdja/";

    private int width;

    private int height;

    private DisplayMetrics displayMetrics;

    private double screenInches;

    private int rotationWidth;

    private int rotationHeight;

    private SurfaceView surfaceView;

    private SurfaceHolder surfaceHolder;

    private boolean setRecogArgs = false;

    private Camera camera;

    private int preWidth, preHeight;

    private TimerTask timer;

    private IDCardAPI idCardAPI = new IDCardAPI();

    private boolean isFocusSuccess = false;

    private boolean isFirstGetSize;

    private Size size;

    private int nMainIDX = 2;
    
    private boolean isConfirmSideLine = true;

    private int[] nflag = new int[4];

    private int ConfirmSideSuccess;

    private int CheckPicIsClearCounts = 0;

    private int CheckPicIsClear;

    private byte[] dataBuffer;

    private String picPathString;

    private String recogResultPath;

    private String HeadJpgPath;

    private int quality = 100;

    private int left;

    private int right;

    private int top;

    private int bottom;

    double rateWidth = 0.6;

    double rateHeight = rateWidth * 54 / 85;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        setContentView(R.layout.id_card_regconizer_layout);

        initView();

        Intent intent = new Intent();
        intent.putExtra("number", "");
        setResult(RESULT_OK, intent);
    }

    private void initView() {

        displayMetrics = new DisplayMetrics();

        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
        width = displayMetrics.widthPixels;
        height = displayMetrics.heightPixels;

        double x = Math
                .pow(displayMetrics.widthPixels / displayMetrics.xdpi, 2);
        double y = Math.pow(displayMetrics.heightPixels / displayMetrics.ydpi,
                2);

        screenInches = Math.sqrt(x + y);
        // android设备的物理尺寸 end
        rotationWidth = displayMetrics.widthPixels;
        rotationHeight = displayMetrics.heightPixels;

        Zzlog.out(TAG, "initView()...Screen inches : " + screenInches 
                 + "rotationWidth = " + rotationWidth
                 + "rotationHeight = " + rotationHeight);
        
        FoucsView1 foucsView = new FoucsView1(this, (int)(width * rateWidth),
                                                    (int)(width * rateHeight));

        RelativeLayout relativeLayout = (RelativeLayout) findViewById(R.id.relative_layout);
        relativeLayout.addView(foucsView);

        surfaceView = (SurfaceView) findViewById(R.id.surfaceViwe_video);
    }

    @Override
    protected void onResume() {
        super.onResume();

        surfaceHolder = surfaceView.getHolder();
        surfaceHolder.addCallback(surfaceCallBack);
    }

    @Override
    protected void onPause() {
        super.onPause();
        releaseCamera();
    }

    SurfaceHolder.Callback surfaceCallBack = new SurfaceHolder.Callback (){

        @Override
        public void surfaceCreated(SurfaceHolder holder) {
            Zzlog.out(TAG, "surfaceCreated()");
            initCamera(holder);
        }

        @Override
        public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            
        }

        @Override
        public void surfaceDestroyed(SurfaceHolder holder) {
            
        }};
    
    Camera.PreviewCallback cameraPreviewCallBack = new Camera.PreviewCallback () {



        @Override
        public void onPreviewFrame(byte[] data, Camera camera) {

            if (isFirstGetSize) {
                isFirstGetSize = false;
                size = camera.getParameters().getPreviewSize();
                left = (int) (0.15 * size.width);
                right = (int) (size.width * 0.85);
                top = size.height / 3;
                bottom = 2 * size.height / 3;
                Log.i(TAG, "onPreviewFrame size.width = " + size.width
                        + ", size.height" + size.height);
            }

            recognizingProcess(data);
        }
    };

    
    
    
    protected void recognizingProcess(byte[] data) {
        if (isFocusSuccess) {
            if (nMainIDX == 2) { // 身份证
                idCardAPI.SetROI(
                        (int) (size.width * 0.2),
                        (int) (size.height - 0.41004673 * size.width) / 2,
                        (int) (size.width * 0.85),
                        (int) (size.height + 0.41004673 * size.width) / 2);// 预留参数

//                idCardAPI.SetROI(
//                        (int) (size.height * 0.1),
//                        (int) (size.width/2 - size.height * rateHeight /2),
//                        (int) (size.height * 0.9),
//                        (int) (size.width/2 + size.height * rateHeight /2));
            }

            if (isConfirmSideLine) {
                ConfirmSideSuccess = idCardAPI.ConfirmSideLine(data, size.width, size.height, nflag);
            }

            Log.i(TAG, "isConfirmSideLine = " + isConfirmSideLine 
                     + ", ConfirmSideSuccess = " + ConfirmSideSuccess
                     + ", size.width = " + size.width
                     + ", size.height = " + size.height
                     + ", nflag = " + nflag[0] + ", " + nflag[1] + ", " + nflag[2] + ", " + nflag[3]);

            if (ConfirmSideSuccess == 1) {
                isConfirmSideLine = false;
                CheckPicIsClearCounts  = CheckPicIsClearCounts + 1;
                if (CheckPicIsClearCounts > 3) {
                    isConfirmSideLine = true;
                    CheckPicIsClearCounts = 0;
                    return;
                }

                CheckPicIsClear = idCardAPI.CheckPicIsClear(data, size.width, size.height);

                if (ConfirmSideSuccess == 1 && CheckPicIsClear == 1) {
                    dataBuffer = data;

                    picPathString = PATH + "xdja_" + timeString() + ".jpg";
                    recogResultPath = PATH + "idcapture_" + timeString() + ".txt";
                    HeadJpgPath = PATH + "head_" + timeString() + ".jpg"; //头像
                    String picPathString1 = PATH + "xdja_" + timeString()
                            + "_full.jpg";
                    File file = new File(PATH);
                    if (!file.exists()) file.mkdirs();


                    YuvImage yuvimage = new YuvImage(dataBuffer, ImageFormat.NV21,
                            size.width, size.height, null);
                    

                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    if (nMainIDX == 2 ) {
                        yuvimage.compressToJpeg(new Rect(0, 0, size.width,
                                size.height), quality , baos);
                    }
                    FileOutputStream outStream;

                    try {
                        outStream = new FileOutputStream(picPathString1);
                        outStream.write(baos.toByteArray());
                        outStream.close();
                        baos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    RecogService.isRecogByPath = false;
                    Intent recogIntent = new Intent(this, RecogService.class);
                    bindService(recogIntent, recogConn, Service.BIND_AUTO_CREATE);
                }
            }
            
        }
    }
    
    public String timeString() {
        String str = "";
        Time t = new Time();
        t.setToNow(); // 取得系统时间。
        int year = t.year;
        int month = t.month + 1;
        int date = t.monthDay;
        int hour = t.hour; // 0-23
        int minute = t.minute;
        int second = t.second;

        if (month < 10)
            str = String.valueOf(year) + "0" + String.valueOf(month);
        else {
            str = String.valueOf(year) + String.valueOf(month);
        }
        if (date < 10)
            str = str + "0" + String.valueOf(date);
        else {
            str = str + String.valueOf(date);
        }
        if (hour < 10)
            str = str + "0" + String.valueOf(hour);
        else {
            str = str + String.valueOf(hour);
        }
        if (minute < 10)
            str = str + "0" + String.valueOf(minute);
        else {
            str = str + String.valueOf(minute);
        }
        if (second < 10)
            str = str + "0" + String.valueOf(second);
        else {
            str = str + String.valueOf(second);
        }
        return str;
    }


    protected void initCamera(SurfaceHolder holder) {
        setRecogArgs  = true;
        if (camera == null) {
            try {
                camera = Camera.open();

            } catch (Exception e) {
                e.printStackTrace();
                return;
            }
        }
        

        Camera.Parameters parameters = camera.getParameters();
        List<Camera.Size> list = parameters.getSupportedPreviewSizes();
        int length = list.size();
        int previewWidth = 480;
        int previewheight = 640;
        int second_previewWidth = 0;
        int second_previewheight = 0;
        if (length == 1) {
            size = list.get(0);
            previewWidth = size.width;
            previewheight = size.height;
            Zzlog.out(TAG, "previewWidth = " + previewWidth + ", previewheight = " + previewheight);
        } else {
            for (int i = 0; i < length; i++) {
                size = list.get(i);
                if (size.height <= 960 || size.width <= 1280) {
                    second_previewWidth = size.width;
                    second_previewheight = size.height;
                    if (previewWidth <= second_previewWidth) {
                        previewWidth = second_previewWidth;
                        previewheight = second_previewheight;
                    }
                }
            }
        }

        preWidth = previewWidth;
        preHeight = previewheight;
        Zzlog.out(TAG, "预览分辨率：preWidth = " + preWidth + ", preHeight = " + preHeight);
        parameters.setPictureFormat(PixelFormat.JPEG);
        parameters.setPreviewSize(preWidth, preHeight);
        parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);

        camera.setParameters(parameters);
        camera.setDisplayOrientation(ROTATION);

        camera.setPreviewCallback(cameraPreviewCallBack);
        try {
            camera.setPreviewDisplay(holder);
        } catch (Exception e) {
            e.printStackTrace();
        }
        camera.startPreview();

        startAutoFoucs();
    }


    private void startAutoFoucs() {

        Timer time = new Timer();
        if (timer == null) {
            timer = new TimerTask() {
                public void run() {

                    if (camera != null) {
                        try {
                            camera.autoFocus(new AutoFocusCallback() {

                                public void onAutoFocus(boolean success, Camera camera) {
                                    if (success) {
                                        Zzlog.out(TAG, "onAutoFocus ().");
                                        startRecognizing();
                                    }
                                }
                            });
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                };
            };
            time.schedule(timer, 1000, 2000);
        }
        
    }

    private void startRecognizing() {
        isFocusSuccess = true;
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(1000);
                    isFocusSuccess = false;
                    Zzlog.out(TAG, "startRecognizing().. isFocusSuccess = false");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }}).start();
    }

    private void releaseCamera() {
        try {
            if (camera != null) {
                camera.setPreviewCallback(null);
                camera.stopPreview();
                camera.release();
                camera = null;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        unbindregservice();
    }

    private void unbindregservice() {
        if (recogBinder != null) {
            try {
                unbindService(recogConn);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public RecogService.recogBinder recogBinder;

    protected Object recogResultString;

    private ServiceConnection recogConn = new ServiceConnection() {


        public void onServiceDisconnected(ComponentName name) {
            recogBinder = null;
        }

        public void onServiceConnected(ComponentName name, IBinder service) {

            recogBinder = (RecogService.recogBinder) service;

            recogBinder.IDCardGetInit();

            RecogParameterMessage rpm = new RecogParameterMessage();
            rpm.nTypeLoadImageToMemory = 0;
            rpm.nMainID = nMainIDX;
            rpm.nSubID = null;
            rpm.GetSubID = true;
            rpm.GetVersionInfo = true;
            rpm.logo = "";
            rpm.userdata = "";
            rpm.sn = "";
            rpm.authfile = "";
            rpm.isCut = false;
            rpm.triggertype = 0;
            rpm.devcode = Constant.DEVCODE;
            rpm.isOnlyClassIDCard = true;
            if (nMainIDX == 3000) {
                // 自动识别参数 start
                rpm.nv21bytes = dataBuffer;
                rpm.top = top;
                rpm.bottom = bottom;
                rpm.left = left;
                rpm.right = right;
                rpm.nRotateType = 1; // 0,代表横屏，1 代表竖屏
                rpm.width = size.width;
                rpm.height = size.height;

            } else if (nMainIDX == 2) {
                rpm.isAutoClassify = true;
                // pic data
                rpm.nv21bytes = dataBuffer;
                rpm.nv21_width = preWidth;
                rpm.nv21_height = preHeight;
                // jpg path
                rpm.lpHeadFileName = HeadJpgPath;
                rpm.lpFileName = picPathString; // rpm.lpFileName当为空时，会执行自动识别函数
            } else {
                rpm.nv21bytes = dataBuffer;
                rpm.nv21_width = preWidth;
                rpm.nv21_height = preHeight;
                rpm.lpHeadFileName = HeadJpgPath;
                rpm.lpFileName = picPathString; // rpm.lpFileName当为空时，会执行自动识别函数
            }
            // end
            try {

                camera.stopPreview();
                ResultMessage resultMessage;
                resultMessage = recogBinder.getRecogResult(rpm);
                if (resultMessage.ReturnAuthority == 0
                        && resultMessage.ReturnInitIDCard == 0
                        && resultMessage.ReturnLoadImageToMemory == 0
                        && resultMessage.ReturnRecogIDCard > 0) {
                    String iDResultString = "";
                    String[] GetFieldName = resultMessage.GetFieldName;
                    String[] GetRecogResult = resultMessage.GetRecogResult;
                    // 获得字段位置坐标的函数

                    for (int i = 1; i < GetFieldName.length; i++) {
                        if (GetRecogResult[i] != null) {
                            if (!recogResultString.equals(""))
                                recogResultString = recogResultString
                                        + GetFieldName[i] + ":"
                                        + GetRecogResult[i] + ",";
                            else {
                                recogResultString = GetFieldName[i] + ":"
                                        + GetRecogResult[i] + ",";
                            }
                        }
                    }

                    releaseCamera();

                    Vibrator mVibrator = (Vibrator) getApplication().getSystemService(
                            Service.VIBRATOR_SERVICE);
                    mVibrator.vibrate(200);
                    Zzlog.out(TAG, "recogResultString:" + recogResultString);
                    // Intent intent = new Intent(this, ShowResultActivity.class);
                    // intent.putExtra("recogResult", recogResultString);
                    // if (devcode != null)
                    // intent.putExtra("devcode", devcode);
                    // CameraActivity.this.finish();
                    // startActivity(intent);
                } else {
                    String string = "";
                    if (resultMessage.ReturnAuthority == -100000) {
                        string = getString(R.string.exception)
                                + resultMessage.ReturnAuthority;
                    } else if (resultMessage.ReturnAuthority != 0) {
                        string = getString(R.string.exception1)
                                + resultMessage.ReturnAuthority;
                    } else if (resultMessage.ReturnInitIDCard != 0) {
                        string = getString(R.string.exception2)
                                + resultMessage.ReturnInitIDCard;
                    } else if (resultMessage.ReturnLoadImageToMemory != 0) {
                        if (resultMessage.ReturnLoadImageToMemory == 3) {
                            string = getString(R.string.exception3)
                                    + resultMessage.ReturnLoadImageToMemory;
                        } else if (resultMessage.ReturnLoadImageToMemory == 1) {
                            string = getString(R.string.exception4)
                                    + resultMessage.ReturnLoadImageToMemory;
                        } else {
                            string = getString(R.string.exception5)
                                    + resultMessage.ReturnLoadImageToMemory;
                        }
                    } else if (resultMessage.ReturnRecogIDCard <= 0) {
                        if (resultMessage.ReturnRecogIDCard == -6) {
                            string = getString(R.string.exception9);
                        } else {
                            string = getString(R.string.exception6)
                                    + resultMessage.ReturnRecogIDCard;
                        }
                    }
                    
//                    Intent intent = new Intent(this, ShowResultActivity.class);
//                    intent.putExtra("exception", string);
//                    startActivity(intent);
                }
            } catch (Exception e) {
                e.printStackTrace();
                Toast.makeText(getApplicationContext(),
                        getString(R.string.recognized_failed),
                        Toast.LENGTH_SHORT).show();

            } finally {
                if (recogBinder != null) {
                    unbindService(recogConn);
                }
            }

        }
    };;
}
