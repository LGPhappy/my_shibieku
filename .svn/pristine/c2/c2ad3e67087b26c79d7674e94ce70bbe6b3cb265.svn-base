package com.xdja.zdsb.utils;

import java.io.File;
import java.io.IOException;

import com.wintone.plateid.PlateCfgParameter;
import com.wintone.plateid.PlateRecognitionParameter;
import com.wintone.plateid.RecogService;
import com.xdja.zdsb.R;

import android.app.Service;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;
import android.os.IBinder;
import android.os.Vibrator;
import android.text.TextUtils;
import android.widget.Toast;

public class PictureRecognize {

    public static final int CAR_PLATE = 1;

    public static final int ID_CARD = 2;

    public static final int DRIVER_LICENSE = 3;

    public static final int PASSPORT = 4;

    public static final int MAX_WIDTH = 2048;

    public static final int MAX_HEIGHT = 1536;

    private static final String TAG = "PictureRecognize";

    RecognizerInterface recognizerInterface = null;
    
    private int picType;

    private String picPath;
    private String tempPic = FileUtils.PATH + "/temp_pic.jpg";

    Bitmap recogBitmap; 
    
    private int width, height;

    private Context context;
    

    
    public PictureRecognize(Context context) {
        this.context = context;
    }

    public void setContext(Context context) {
        this.context = context;
    }

    public synchronized void doRecognize(String picPath, int type, 
            RecognizerInterface recognizerInterface) {

        picType = type;

        this.recognizerInterface = recognizerInterface;

        this.picPath = picPath;
        
        new Thread(new Runnable() {

            @Override
            public void run() {

                getPicProperties();
                
                switch (picType) {
                case CAR_PLATE:
                    recognizeCarplate();
                    break;
                case ID_CARD:
                    
                    break;
                case DRIVER_LICENSE:
                    
                    break;
                case PASSPORT:
                    
                    break;
                default:
                    Zzlog.out(TAG, "unKnow picture type.");
                }
            }

        }).start();
    }

    protected void getPicProperties() {
        Bitmap bitmap = BitmapFactory.decodeFile(picPath);

        width = bitmap.getWidth();
        height = bitmap.getHeight();
        Zzlog.out(TAG, "width = " + width + ", height = " + height);

        if (picType == CAR_PLATE) {
            
            if (width > MAX_WIDTH && height > MAX_HEIGHT) {
                
            }
            
            if (width > MAX_WIDTH ){

            }
            if (height > MAX_HEIGHT){
                int top = (height - MAX_HEIGHT)/2;
                height = MAX_HEIGHT;
                bitmap = Bitmap.createBitmap(bitmap, 0, top, width, height);

                height = 800*height/width;
                width = 800;

                Zzlog.out(TAG, "width = " + width + ", height = " + height);

                bitmap = Bitmap.createScaledBitmap(bitmap, width, height, true);
                FileUtils.savePicture(tempPic, bitmap);
            }
        }

        recogBitmap = bitmap;
    }

    private void recognizeCarplate() {
        Zzlog.out(TAG, "recognizeCarplate ..... ");
        Intent intent = new Intent(context, RecogService.class);
        context.bindService(intent, recogConn, Service.BIND_AUTO_CREATE);
    }

    public RecogService.MyBinder recogBinder;
    
    public ServiceConnection recogConn = new ServiceConnection() {

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            Zzlog.out(TAG, "onServiceConnected()! !");

            recogBinder = (RecogService.MyBinder) service;

            int iInitPlateIDSDK = recogBinder.getInitPlateIDSDK();

            Zzlog.out(TAG, "onServiceConnected .. iInitPlateIDSDK = " + iInitPlateIDSDK);

            if (iInitPlateIDSDK != 0) {
                String[] str = {"" + iInitPlateIDSDK};
                errorNotify(iInitPlateIDSDK);
            }

            PlateCfgParameter cfgparameter = new PlateCfgParameter();
            cfgparameter.armpolice = 4;
            cfgparameter.armpolice2 = 16;
            cfgparameter.embassy = 12;
            cfgparameter.individual = 0;
            
            cfgparameter.nOCR_Th = 0;
            cfgparameter.nPlateLocate_Th = 5;
            cfgparameter.onlylocation = 15;
            cfgparameter.tworowyellow = 2;
            cfgparameter.tworowarmy = 6;
            cfgparameter.szProvince = "";
            cfgparameter.onlytworowyellow = 11;
            cfgparameter.tractor = 8;
            cfgparameter.bIsNight = 1;

            cfgparameter.armpolice = 4;// 单层武警车牌是否开启:4是；5不是
            cfgparameter.armpolice2 = 16;// 双层武警车牌是否开启:16是；17不是
            cfgparameter.embassy = 12;// 使馆车牌是否开启:12是；13不是
            cfgparameter.individual = 0;// 是否开启个性化车牌:0是；1不是
            //cfgparameter.nContrast = 9;// 清晰度指数(取值范围0-9,最模糊时设为1;最清晰时设为9)
            cfgparameter.nOCR_Th = 0;
            cfgparameter.nPlateLocate_Th = 5;// 识别阈值(取值范围0-9,5:默认阈值0:最宽松的阈值9:最严格的阈值)
            cfgparameter.onlylocation = 15;// 只定位车牌是否开启:14是；15不是
            cfgparameter.tworowyellow = 2;// 双层黄色车牌是否开启:2是；3不是
            cfgparameter.tworowarmy = 6;// 双层军队车牌是否开启:6是；7不是
            cfgparameter.szProvince = "";// 省份顺序
            cfgparameter.onlytworowyellow = 11;// 只识别双层黄牌是否开启:10是；11不是
            cfgparameter.tractor = 8;// 农用车车牌是否开启:8是；9不是
            cfgparameter.bIsNight = 1;// 是否夜间模式：1是；0不是  //废弃参数

            int imageformat = 1;// jpg
            int bVertFlip = 0;
            int bDwordAligned = 1;
            recogBinder.setRecogArgu(cfgparameter, imageformat, bVertFlip, bDwordAligned);
            String[] fieldvalue = null;
            int nRet = -1;

            PlateRecognitionParameter prp = new PlateRecognitionParameter();


            prp.pic = tempPic;
//            prp.width = width;
//            prp.height = height;
            Zzlog.out(TAG, "tempPic = " + tempPic + ", width = "
                                         + width + ", height = " + height);

            prp.devCode = Constant.DEVCODE;

            fieldvalue = recogBinder.doRecogDetail(prp);
            nRet = recogBinder.getnRet();

            if (nRet != 0) {
                String[] str = {"" + nRet};
                Zzlog.out(TAG, " nRet = " + nRet);
                errorNotify(nRet);
            } else {
                if (fieldvalue != null)
                    getResult(fieldvalue);
            }

        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            Zzlog.out(TAG, "onServiceDisconnected()! !");
            recogBinder = null;
        }
    };
    
    public void clean(){
        
    }
    
    
    private void errorNotify(int iInitPlateIDSDK) {
        
        String nretString = iInitPlateIDSDK + "";

        if (nretString.equals("-1001")) {
            Toast.makeText(context, context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                    + context.getString(R.string.failed_readJPG_error), Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10001")) {
            Toast.makeText(context,
                    context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                            + context.getString(R.string.failed_noInit_function),
                    Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10003")) {
            Toast.makeText(context,
                    context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                            + context.getString(R.string.failed_validation_faile),
                    Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10004")) {
            Toast.makeText(context,
                    context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                            + context.getString(R.string.failed_serial_number_null),
                    Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10005")) {
            Toast.makeText(context,
                    context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                            + context.getString(R.string.failed_disconnected_server),
                    Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10006")) {
            Toast.makeText(context,
                    context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                            + context.getString(R.string.failed_obtain_activation_code),
                    Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10007")) {
            Toast.makeText(context,
                    context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                            + context.getString(R.string.failed_noexist_serial_number),
                    Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10008")) {
            Toast.makeText(context,
                    context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                            + context.getString(R.string.failed_serial_number_used),
                    Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10009")) {
            Toast.makeText(context,
                    context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                            + context.getString(R.string.failed_unable_create_authfile),
                    Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10010")) {
            Toast.makeText(context,
                    context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                            + context.getString(R.string.failed_check_activation_code),
                    Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10011")) {
            Toast.makeText(context, context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                    + context.getString(R.string.failed_other_errors), Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10012")) {
            Toast.makeText(context, context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                    + context.getString(R.string.failed_not_active), Toast.LENGTH_SHORT).show();

        } else if (nretString.equals("-10015")) {
            Toast.makeText(context, context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n"
                    + context.getString(R.string.failed_check_failure), Toast.LENGTH_SHORT).show();

        } else {
            Toast.makeText(context, context.getString(R.string.recognize_result) + iInitPlateIDSDK + "\n",
                    Toast.LENGTH_SHORT).show();
        }
    }
    private void getResult(String[] fieldvalue) {

        Zzlog.out(TAG, "getResult: ......................");

        if (fieldvalue != null && fieldvalue.length > 0) {
            for (int i = 0; i < fieldvalue.length; i++) {
                Zzlog.out(TAG, "fieldvalue[" + i + "] = " + fieldvalue[i]);
            }
        } else {
            Zzlog.out(TAG, "fieldvalue id empty!");
        }

        String[] resultString;
        String boolString = "";
        boolString = fieldvalue[0];

        if (!TextUtils.isEmpty(boolString)) {

            resultString = boolString.split(";");
            int length = resultString.length;
            String firstNumber = null;
            if (length > 0) {
                firstNumber = resultString[0];
                for (int i = 0; i < length; i++) {
                    Zzlog.out(TAG, "resultString[" + i + "] = " + resultString[i]);
                }
            }
            if (!TextUtils.isEmpty(firstNumber)) {
                String color = null;
                if (fieldvalue.length > 2) {
                    color = fieldvalue[1];
                }

                Vibrator vibrator = (Vibrator) context.getSystemService(Service.VIBRATOR_SERVICE);
                vibrator.vibrate(300);

            }
        }

        fieldvalue = null;
    }


}